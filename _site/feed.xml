<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-12T15:05:24-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Leonardo Pereira</title><subtitle>Personal blog where I share my thoughts about programming,  technology, and other interesting topics.</subtitle><entry><title type="html">Ruby Tips and Tricks You Should Know</title><link href="http://localhost:4000/2023/07/10/ruby-tips-and-tricks/" rel="alternate" type="text/html" title="Ruby Tips and Tricks You Should Know" /><published>2023-07-10T15:30:00-04:00</published><updated>2023-07-10T15:30:00-04:00</updated><id>http://localhost:4000/2023/07/10/ruby-tips-and-tricks</id><content type="html" xml:base="http://localhost:4000/2023/07/10/ruby-tips-and-tricks/"><![CDATA[<h2 id="5-ruby-tips-and-tricks-to-enhance-your-code">5 Ruby Tips and Tricks to Enhance Your Code</h2>

<p>Ruby is a language known for its elegance and developer-friendly features. Today, I’ll share some of my favorite Ruby tips and tricks that can make your code more concise, readable, and efficient.</p>

<h3 id="1-use-the-safe-navigation-operator">1. Use the Safe Navigation Operator</h3>

<p>The safe navigation operator (<code class="language-plaintext highlighter-rouge">&amp;.</code>) is a great way to avoid <code class="language-plaintext highlighter-rouge">nil</code> errors. It’s similar to the try method but built into the language.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Instead of this:</span>
<span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="nf">profile</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="nf">profile</span><span class="p">.</span><span class="nf">name</span>

<span class="c1"># You can do this:</span>
<span class="n">user</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">profile</span><span class="o">&amp;</span><span class="p">.</span><span class="nf">name</span>
</code></pre></div></div>

<h3 id="2-one-line-conditionals">2. One-Line Conditionals</h3>

<p>Ruby allows you to write conditionals in a very concise way:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Traditional if statement</span>
<span class="k">if</span> <span class="n">user</span><span class="p">.</span><span class="nf">admin?</span>
  <span class="n">redirect_to</span> <span class="n">admin_path</span>
<span class="k">end</span>

<span class="c1"># One-liner</span>
<span class="n">redirect_to</span> <span class="n">admin_path</span> <span class="k">if</span> <span class="n">user</span><span class="p">.</span><span class="nf">admin?</span>

<span class="c1"># Using unless</span>
<span class="k">return</span> <span class="k">unless</span> <span class="n">valid?</span>
</code></pre></div></div>

<h3 id="3-the-splat-operator">3. The Splat Operator</h3>

<p>The splat operator (<code class="language-plaintext highlighter-rouge">*</code>) is powerful for working with arrays:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Convert array elements to arguments</span>
<span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hello, </span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">!"</span>
<span class="k">end</span>

<span class="n">person</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"John"</span><span class="p">,</span> <span class="s2">"Smith"</span><span class="p">]</span>
<span class="n">greet</span><span class="p">(</span><span class="o">*</span><span class="n">person</span><span class="p">)</span>  <span class="c1"># Outputs: Hello, John Smith!</span>

<span class="c1"># Capture remaining arguments</span>
<span class="k">def</span> <span class="nf">team</span><span class="p">(</span><span class="n">captain</span><span class="p">,</span> <span class="o">*</span><span class="n">members</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Captain: </span><span class="si">#{</span><span class="n">captain</span><span class="si">}</span><span class="s2">"</span>
  <span class="nb">puts</span> <span class="s2">"Members: </span><span class="si">#{</span><span class="n">members</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s1">', '</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>

<span class="n">team</span><span class="p">(</span><span class="s2">"Alice"</span><span class="p">,</span> <span class="s2">"Bob"</span><span class="p">,</span> <span class="s2">"Charlie"</span><span class="p">,</span> <span class="s2">"Dave"</span><span class="p">)</span>
<span class="c1"># Outputs:</span>
<span class="c1"># Captain: Alice</span>
<span class="c1"># Members: Bob, Charlie, Dave</span>
</code></pre></div></div>

<h3 id="4-using-tap-for-method-chaining">4. Using tap for Method Chaining</h3>

<p>The <code class="language-plaintext highlighter-rouge">tap</code> method allows you to perform operations in a method chain without affecting the chain:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Without tap</span>
<span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">new</span>
<span class="n">user</span><span class="p">.</span><span class="nf">name</span> <span class="o">=</span> <span class="s2">"John"</span>
<span class="n">user</span><span class="p">.</span><span class="nf">email</span> <span class="o">=</span> <span class="s2">"john@example.com"</span>
<span class="n">user</span><span class="p">.</span><span class="nf">save</span>

<span class="c1"># With tap</span>
<span class="no">User</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span>
  <span class="n">u</span><span class="p">.</span><span class="nf">name</span> <span class="o">=</span> <span class="s2">"John"</span>
  <span class="n">u</span><span class="p">.</span><span class="nf">email</span> <span class="o">=</span> <span class="s2">"john@example.com"</span>
<span class="k">end</span><span class="p">.</span><span class="nf">save</span>
</code></pre></div></div>

<h3 id="5-the--operator">5. The <code class="language-plaintext highlighter-rouge">||=</code> Operator</h3>

<p>The <code class="language-plaintext highlighter-rouge">||=</code> operator (also known as the “or equals” operator) is great for memoization and setting default values:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Set a default value</span>
<span class="vi">@cache</span> <span class="o">||=</span> <span class="p">{}</span>

<span class="c1"># Memoization</span>
<span class="k">def</span> <span class="nf">current_user</span>
  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="p">.</span><span class="nf">find_by</span><span class="p">(</span><span class="ss">id: </span><span class="n">session</span><span class="p">[</span><span class="ss">:user_id</span><span class="p">])</span>
<span class="k">end</span>
</code></pre></div></div>

<h3 id="conclusion">Conclusion</h3>

<p>These Ruby tips and tricks can help you write cleaner, more maintainable code. Remember, the best Ruby code often reads almost like plain English, so strive for clarity and elegance in your solutions.</p>

<p>What are your favorite Ruby tricks? Let me know in the comments below!</p>]]></content><author><name></name></author><category term="programming" /><category term="ruby" /><category term="ruby" /><category term="tips" /><category term="tricks" /><category term="development" /><summary type="html"><![CDATA[5 Ruby Tips and Tricks to Enhance Your Code]]></summary></entry><entry><title type="html">Welcome to My Blog!</title><link href="http://localhost:4000/2023/06/15/welcome-to-my-blog/" rel="alternate" type="text/html" title="Welcome to My Blog!" /><published>2023-06-15T12:00:00-04:00</published><updated>2023-06-16T10:30:00-04:00</updated><id>http://localhost:4000/2023/06/15/welcome-to-my-blog</id><content type="html" xml:base="http://localhost:4000/2023/06/15/welcome-to-my-blog/"><![CDATA[<h2 id="hello-world">Hello World!</h2>

<p>Welcome to my new blog! I’m excited to share my thoughts, ideas, and experiences with you. This blog will primarily focus on programming, technology, and other topics that interest me.</p>

<h3 id="what-to-expect">What to Expect</h3>

<p>In this blog, you can expect:</p>

<ul>
  <li>Tutorials on Ruby, Rails, and JavaScript</li>
  <li>Tips and tricks for web development</li>
  <li>My thoughts on new technologies and frameworks</li>
  <li>Personal projects and learning experiences</li>
</ul>

<h3 id="code-examples">Code Examples</h3>

<p>Here’s a simple Ruby example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># A simple greeting class in Ruby</span>
<span class="k">class</span> <span class="nc">Greeter</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">greet</span>
    <span class="nb">puts</span> <span class="s2">"Hello, </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">!"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">greeter</span> <span class="o">=</span> <span class="no">Greeter</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"World"</span><span class="p">)</span>
<span class="n">greeter</span><span class="p">.</span><span class="nf">greet</span>  <span class="c1"># Outputs: Hello, World!</span>
</code></pre></div></div>

<h3 id="markdown-support">Markdown Support</h3>

<p>Jekyll uses Markdown, which makes it easy to format posts:</p>

<ul>
  <li><strong>Bold text</strong> is created with double asterisks</li>
  <li><em>Italic text</em> uses single asterisks</li>
  <li><a href="https://jekyllrb.com">Links</a> are created with square brackets and parentheses</li>
  <li>Lists, like this one, are created with dashes</li>
</ul>

<h3 id="stay-connected">Stay Connected</h3>

<p>Don’t forget to subscribe to the <a href="/feed.xml">RSS feed</a> to get notified when I publish new posts.</p>

<p>I hope you enjoy reading my blog as much as I enjoy writing it!</p>

<p>See you in the next post.</p>]]></content><author><name></name></author><category term="general" /><category term="introduction" /><category term="welcome" /><category term="jekyll" /><category term="blog" /><summary type="html"><![CDATA[Hello World!]]></summary></entry></feed>