<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-12T16:39:11-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Leonardo Pereira</title><subtitle>Personal blog where I share my thoughts about programming,  technology, and other interesting topics.</subtitle><entry><title type="html">Comments and Storyline</title><link href="http://localhost:4000/2025/03/12/comments-and-storyline/" rel="alternate" type="text/html" title="Comments and Storyline" /><published>2025-03-12T15:38:00-04:00</published><updated>2025-03-12T15:38:00-04:00</updated><id>http://localhost:4000/2025/03/12/comments-and-storyline</id><content type="html" xml:base="http://localhost:4000/2025/03/12/comments-and-storyline/"><![CDATA[<p>Recently I have stumbled upon this <a href="https://github.com/johnousterhout/aposd-vs-clean-code/blob/main/README.md">discussion</a> between <strong>Uncle Bob</strong> and <strong>John Ousterhout</strong>. It’s a bit aggressive and harsh, but nonetheless it’s worth reading! They go through 3 main topics:</p>

<ul>
  <li>Refactoring and small methods vs longer methods.</li>
  <li>Comments, useful or not?</li>
  <li>TDD.</li>
</ul>

<p>I want to discuss the second and third topics, but in this post I’ll focus on the second one: <em>Comments!</em></p>

<p>My opinion is that comments should give a piece of history or story around why a decision was made. I don’t think a minimum amount of comments and self-documented code is always sufficient, though most of the time it is! But sometimes there is a missing piece about why the decision was made, and even if the code is quite self-explanatory, the “why” cannot be guessed.</p>

<p>For example, let’s look at this fake authentication method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
    <span class="c1"># We don't use has_secure_password here because we needed to maintain</span>
    <span class="c1"># compatibility with our legacy system that used a custom hashing algorithm.</span>
    <span class="c1"># This implementation ensures that both old and new passwords work during</span>
    <span class="c1"># the transition period. See migration plan in JIRA ticket AUTH-4592.</span>
    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">password_digest</span><span class="p">.</span><span class="nf">blank?</span>
    
    <span class="k">if</span> <span class="n">password_digest</span><span class="p">.</span><span class="nf">start_with?</span><span class="p">(</span><span class="s1">'legacy:'</span><span class="p">)</span>
      <span class="c1"># Legacy algorithm with different salt approach</span>
      <span class="n">legacy_digest</span> <span class="o">=</span> <span class="n">password_digest</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="s1">'legacy:'</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>
      <span class="no">LegacyPasswordService</span><span class="p">.</span><span class="nf">check</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">legacy_digest</span><span class="p">).</span><span class="nf">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="o">|</span>
        <span class="c1"># Upgrade to bcrypt if login successful with legacy password</span>
        <span class="n">update</span><span class="p">(</span><span class="ss">password: </span><span class="n">password</span><span class="p">)</span> <span class="k">if</span> <span class="n">result</span>
      <span class="k">end</span>
    <span class="k">else</span>
      <span class="no">BCrypt</span><span class="o">::</span><span class="no">Password</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">password_digest</span><span class="p">).</span><span class="nf">is_password?</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The comment here tells us exactly <em>why</em> we’re not using Rails’ built-in <code class="language-plaintext highlighter-rouge">has_secure_password</code>. Without this comment, someone might think “let’s refactor this to use the standard approach” and break compatibility with the legacy system. The comment gives us crucial insight that we’d never get just from the code!</p>

<p>Here’s another example on a possible payment system:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PaymentProcessor</span>
  <span class="k">def</span> <span class="nf">process_international_payment</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">currency</span><span class="p">,</span> <span class="n">recipient</span><span class="p">)</span>
    <span class="c1"># Japanese yen amounts must be handled as whole numbers without decimal places</span>
    <span class="c1"># due to requirements from their banking API. One JPY in our system is sent as 1,</span>
    <span class="c1"># unlike other currencies where we send the amount in smallest unit (cents)</span>
    <span class="k">if</span> <span class="n">currency</span><span class="p">.</span><span class="nf">upcase</span> <span class="o">==</span> <span class="s1">'JPY'</span>
      <span class="n">formatted_amount</span> <span class="o">=</span> <span class="n">amount</span><span class="p">.</span><span class="nf">to_i</span>
    <span class="k">else</span>
      <span class="c1"># Convert from dollars to cents for other currencies</span>
      <span class="n">formatted_amount</span> <span class="o">=</span> <span class="p">(</span><span class="n">amount</span> <span class="o">*</span> <span class="mi">100</span><span class="p">).</span><span class="nf">to_i</span>
    <span class="k">end</span>
    
    <span class="c1"># Stripe has a 25-second timeout for payments to Turkey (see outage report 2023-05-12)</span>
    <span class="c1"># so we increase our timeout and add retries only for this specific country</span>
    <span class="n">timeout</span> <span class="o">=</span> <span class="n">recipient</span><span class="p">.</span><span class="nf">country_code</span> <span class="o">==</span> <span class="s1">'TR'</span> <span class="p">?</span> <span class="mi">45</span> <span class="p">:</span> <span class="mi">30</span>
    
    <span class="n">api_client</span><span class="p">.</span><span class="nf">create_payment</span><span class="p">(</span>
      <span class="ss">amount: </span><span class="n">formatted_amount</span><span class="p">,</span>
      <span class="ss">currency: </span><span class="n">currency</span><span class="p">,</span>
      <span class="ss">recipient: </span><span class="n">recipient</span><span class="p">,</span>
      <span class="ss">request_timeout: </span><span class="n">timeout</span>
    <span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>The comments explain business logic that isn’t obvious at all from the code. Without them, someone might try to “clean up” the code by standardizing the amount formatting or timeouts, and boom! You’ve got subtle bugs in production that are super hard to track down.</p>

<p>And if a new developer decides to refactor the code, which they should consider, they might think “why not use a <a href="https://github.com/RubyMoney/money">Money</a> gem to handle the details?” With these comments, they will have extra information to actually perform the best changes, and not just wait for a test to break or a fire to be put out.</p>

<p>Now look at this example, explaining exactly what a code should do, in steps where the code itself can already express these actions:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Order</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="c1"># This method calculates the total price of the order</span>
  <span class="k">def</span> <span class="nf">calculate_total</span>
    <span class="c1"># Initialize the total variable to zero</span>
    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="c1"># Loop through each item in the order</span>
    <span class="n">order_items</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
      <span class="c1"># Get the price of each item</span>
      <span class="n">item_price</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">price</span>
      
      <span class="c1"># Get the quantity of each item</span>
      <span class="n">quantity</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">quantity</span>
      
      <span class="c1"># Multiply price by quantity to get item subtotal</span>
      <span class="n">item_subtotal</span> <span class="o">=</span> <span class="n">item_price</span> <span class="o">*</span> <span class="n">quantity</span>
      
      <span class="c1"># Add the item subtotal to the total</span>
      <span class="n">total</span> <span class="o">+=</span> <span class="n">item_subtotal</span>
    <span class="k">end</span>
    
    <span class="c1"># If there is a discount, subtract it from the total</span>
    <span class="k">if</span> <span class="n">discount</span><span class="p">.</span><span class="nf">present?</span>
      <span class="c1"># Get the discount amount</span>
      <span class="n">discount_amount</span> <span class="o">=</span> <span class="n">discount</span><span class="p">.</span><span class="nf">amount</span>
      
      <span class="c1"># Subtract the discount from the total</span>
      <span class="n">total</span> <span class="o">-=</span> <span class="n">discount_amount</span>
    <span class="k">end</span>
    
    <span class="c1"># Return the final total</span>
    <span class="k">return</span> <span class="n">total</span>
  <span class="k">end</span>
  
  <span class="c1"># This method checks if an order can be shipped</span>
  <span class="k">def</span> <span class="nf">ready_to_ship?</span>
    <span class="c1"># Check if payment has been processed</span>
    <span class="n">payment_processed</span> <span class="o">=</span> <span class="n">payment</span><span class="p">.</span><span class="nf">completed?</span>
    
    <span class="c1"># Check if all items are in stock</span>
    <span class="n">items_available</span> <span class="o">=</span> <span class="n">order_items</span><span class="p">.</span><span class="nf">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="n">item</span><span class="p">.</span><span class="nf">in_stock?</span> <span class="p">}</span>
    
    <span class="c1"># Return true only if payment is processed and items are available</span>
    <span class="k">return</span> <span class="n">payment_processed</span> <span class="o">&amp;&amp;</span> <span class="n">items_available</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>These comments in the last example do not help at all. This is especially true with Ruby, an eloquent language. Why explain if something is in stock when Ruby itself can express this clearly with <code class="language-plaintext highlighter-rouge">item.in_stock?</code>?</p>

<p>These examples show exactly what I’m talking about — comments that go beyond just describing the code. They give us the backstory, the <em>why</em> behind decisions that we could never guess from the code alone. They reference things like historical constraints, API quirks, and business rules that aren’t apparent in the code itself. That’s the real value of good comments!</p>

<p>Now, comments should give context and answer questions that code cannot do. Explain the whys. Otherwise, your code should always be self-explanatory. This includes using good class names and methods that follow good principles and have good design. So you won’t over-engineer anything or add hundreds of bad comments.
Frameworks (such as Rails) have <a href="https://github.com/rails/rails/blob/main/activesupport/lib/active_support/concern.rb">great examples</a> of comments that add context, explanations and lead you to a correct solution.</p>

<p>Happy coding!</p>]]></content><author><name></name></author><category term="programming" /><category term="software design" /><category term="clean code" /><category term="a philosophy of software design" /><category term="comments" /><category term="programming" /><summary type="html"><![CDATA[Recently I have stumbled upon this discussion between Uncle Bob and John Ousterhout. It’s a bit aggressive and harsh, but nonetheless it’s worth reading! They go through 3 main topics:]]></summary></entry><entry><title type="html">Welcome to My Blog!</title><link href="http://localhost:4000/2025/03/12/welcome-to-my-blog/" rel="alternate" type="text/html" title="Welcome to My Blog!" /><published>2025-03-12T15:18:17-04:00</published><updated>2025-03-12T15:18:17-04:00</updated><id>http://localhost:4000/2025/03/12/welcome-to-my-blog</id><content type="html" xml:base="http://localhost:4000/2025/03/12/welcome-to-my-blog/"><![CDATA[<h2 id="hello-world">Hello World!</h2>

<p>Hello! Welcome to my blog. I’ve been wanting to restart my blog for quite a while now. Most of the time I won’t be discussing lengthy subjects or writing comprehensive, in-depth tutorials. Instead, I’ll be sharing interesting things I’ve discovered on the web, my opinions on various topics, and occasionally insights and findings from my work.</p>

<h3 id="about-me">About me</h3>

<p>I work at <a href="https://www.shopify.com/careers">Shopify</a>! It’s the biggest Rails shop in the world, and I absolutely love it. Every single day brings some new discovery, which is awesome! You can learn more about Shopify’s open source philosophy <a href="https://shopify.engineering/shopify-open-source-philosophy">here</a>. Join me as we learn more about Ruby and Rails together. :)</p>]]></content><author><name></name></author><category term="general" /><category term="introduction" /><category term="welcome" /><category term="jekyll" /><category term="blog" /><summary type="html"><![CDATA[Hello World!]]></summary></entry></feed>